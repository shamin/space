{"version":3,"sources":["webpack:///./node_modules/@mdx-js/tag/dist/index.js","webpack:///./node_modules/core-js/modules/es6.string.trim.js","webpack:///./node_modules/prism-react-renderer/themes/nightOwl.js","webpack:///./node_modules/prism-react-renderer/es/vendor/prism/index.js","webpack:///./node_modules/prism-react-renderer/es/defaultProps.js","webpack:///./node_modules/prism-react-renderer/es/utils/normalizeTokens.js","webpack:///./node_modules/prism-react-renderer/es/utils/themeToDict.js","webpack:///./node_modules/prism-react-renderer/es/components/Highlight.js","webpack:///./node_modules/prism-react-renderer/es/index.js","webpack:///./node_modules/@mdx-js/tag/dist/mdx-provider.js","webpack:///./node_modules/@mdx-js/tag/dist/mdx-tag.js","webpack:///./node_modules/core-js/modules/_string-trim.js","webpack:///./node_modules/core-js/modules/_string-ws.js","webpack:///./node_modules/prism-react-renderer/es/vendor/prism/prism-core.js","webpack:///./node_modules/prism-react-renderer/themes/duotoneDark.js"],"names":["Object","defineProperty","exports","value","_mdxTag","__webpack_require__","enumerable","get","_interopRequireDefault","default","_mdxProvider","obj","__esModule","$trim","this","module","plain","color","backgroundColor","styles","types","style","fontStyle","Prism","comment","interpolation","funcPattern","insideEqu","prism_core_default","a","languages","markup","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","attr-value","lookbehind","attr-name","entity","hooks","add","env","type","attributes","content","replace","xml","html","mathml","svg","insideString","variable","number","operator","bash","shebang","alias","string","function","keyword","boolean","shell","clike","class-name","c","extend","insertBefore","macro","directive","constant","cpp","raw-string","css","atrule","rule","url","selector","property","important","rest","style-attr","javascript","regex","function-variable","template-string","interpolation-punctuation","script","js","util","clone","jsx","spread","script-punctuation","stringifyToken","token","map","join","language","walkTokens","tokens","openedTags","i","length","notTagNorBrace","tagName","pop","push","openedBraces","plainText","splice","Token","coffeescript","class-member","multiline-comment","block-regex","inline-javascript","delimiter","multiline-string","actionscript","pseudo-element","pseudo-class","class","id","attribute","hexcode","diff","coord","deleted","inserted","docker","dockerfile","elixir","atom","capture","argument","forEach","o","erlang","quoted-function","quoted-atom","git","command","parameter","commit_sha1","go","builtin","graphql","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","code","match","indexOf","toUpperCase","grammar","tokenizePlaceholders","j","keys","k","t","s","index","replacement","before","substring","middle","tokenize","after","filter","v","Array","prototype","apply","concat","handlebars","block","brackets","haskell","char","import_statement","hvariable","java","annotation","generics","json","null","jsonp","equation-command","latex","equation","headline","less","mixin-usage","makefile","symbol","markdown","blockquote","title","hr","list","url-reference","bold","italic","objectivec","ocaml","php","shell-comment","package","nowdoc-string","heredoc-string","single-quoted-string","double-quoted-string","string_interpolation","test","global","scope","python","triple-quoted-string","reason","character","constructor","label","ruby","rust","lifetime-annotation","macro-rules","closure-params","sass","atrule-line","variable-line","property-line","scss","parent","placeholder","statement","sql","func","stylus","atrule-declaration","variable-declaration","property-declaration","swift","typescript","ts","vim","yaml","scalar","key","datetime","prism","es_defaultProps","theme","newlineRe","normalizeEmptyLines","line","empty","utils_normalizeTokens","typeArrStack","tokenArrStack","tokenArrIndexStack","tokenArrSizeStack","stackIndex","currentLine","acc","splitByNewlines","split","newlineCount","_i","_extends","assign","target","arguments","source","hasOwnProperty","call","utils_themeToDict","base","create","themeDict","reduce","themeEntry","includes","accStyle","root","Highlight_extends","_objectWithoutPropertiesLoose","excluded","sourceKeys","components_Highlight","_Component","subClass","superClass","Highlight","props","_this","getLineProps","_ref","className","output","undefined","getStyleForToken","_ref2","typesSize","display","baseStyle","typeStyles","getTokenProps","_ref3","children","__proto__","render","_this$props","mixedTokens","react","d","__webpack_exports__","withMDXComponents","_react","_react2","_React$createContext","createContext","Provider","Consumer","Component","components","_objectWithoutProperties","createElement","contextComponents","_createClass","descriptor","configurable","writable","Constructor","protoProps","staticProps","defaults","inlineCode","wrapper","MDXTag","instance","TypeError","_classCallCheck","self","ReferenceError","_possibleConstructorReturn","getPrototypeOf","setPrototypeOf","_inherits","_props","name","parentName","_props$props","childProps","_props$components","Layout","layoutProps","$export","defined","fails","spaces","space","ltrim","RegExp","rtrim","exporter","KEY","exec","ALIAS","exp","FORCE","fn","trim","P","F","TYPE","String","uniqueId","_","encode","toString","objId","visited","redef","lang","insert","newToken","ret","DFS","callback","plugins","highlight","text","stringify","matchGrammar","strarr","startPos","oneshot","patterns","lookbehindLength","flags","pos","str","lastIndex","from","to","p","len","delNum","slice","args","wrapped","matchedStr","element","classes","aliases","opacity","textDecorationLine","fontWeight"],"mappings":"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","file":"2-2cad86946a07058ba112.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _mdxTag = require('./mdx-tag');\n\nObject.defineProperty(exports, 'MDXTag', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_mdxTag).default;\n  }\n});\n\nvar _mdxProvider = require('./mdx-provider');\n\nObject.defineProperty(exports, 'MDXProvider', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_mdxProvider).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n","// @flow\n// Original: https://github.com/sdras/night-owl-vscode-theme\n// Converted automatically using ./tools/themeFromVsCode\n\n/*:: import type { PrismTheme } from '../src/types' */\n\nvar theme /*: PrismTheme */ = {\n  plain: {\n    color: \"#d6deeb\",\n    backgroundColor: \"#011627\"\n  },\n  styles: [\n    {\n      types: [\"changed\"],\n      style: {\n        color: \"rgb(162, 191, 252)\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"deleted\"],\n      style: {\n        color: \"rgba(239, 83, 80, 0.56)\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"inserted\", \"attr-name\"],\n      style: {\n        color: \"rgb(173, 219, 103)\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"rgb(99, 119, 119)\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"string\", \"url\"],\n      style: {\n        color: \"rgb(173, 219, 103)\"\n      }\n    },\n    {\n      types: [\"variable\"],\n      style: {\n        color: \"rgb(214, 222, 235)\"\n      }\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"rgb(247, 140, 108)\"\n      }\n    },\n    {\n      types: [\"builtin\", \"char\", \"constant\", \"function\"],\n      style: {\n        color: \"rgb(130, 170, 255)\"\n      }\n    },\n    {\n      // This was manually added after the auto-generation\n      // so that punctuations are not italicised\n      types: [\"punctuation\"],\n      style: {\n        color: \"rgb(199, 146, 234)\",\n      }\n    },\n    {\n      types: [\"selector\", \"doctype\"],\n      style: {\n        color: \"rgb(199, 146, 234)\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"class-name\"],\n      style: {\n        color: \"rgb(255, 203, 139)\"\n      }\n    },\n    {\n      types: [\"tag\", \"operator\", \"keyword\"],\n      style: {\n        color: \"rgb(127, 219, 202)\"\n      }\n    },\n    {\n      types: [\"boolean\"],\n      style: {\n        color: \"rgb(255, 88, 116)\"\n      }\n    },\n    {\n      types: [\"property\"],\n      style: {\n        color: \"rgb(128, 203, 196)\"\n      }\n    },\n    {\n      types: [\"namespace\"],\n      style: {\n        color: \"rgb(178, 204, 214)\"\n      }\n    }\n  ]\n};\n\nmodule.exports = theme;\n","import Prism from './prism-core';\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /(^|[^\\\\])[\"']/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  var insideString = {\n    variable: [// Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        variable: [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        operator: /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        punctuation: /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // Command Substitution\n    {\n      pattern: /\\$\\([^)]+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        variable: /^\\$\\(|^`|\\)$|`$/\n      }\n    }, /\\$(?:[\\w#?*!@]+|\\{[^}]+\\})/i]\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/bin\\/bash|^#!\\s*\\/bin\\/sh/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\])#.*/,\n      lookbehind: true\n    },\n    'string': [//Support for Here-Documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<\\s*)[\"']?(\\w+?)[\"']?\\s*\\r?\\n(?:[\\s\\S])*?\\r?\\n\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'variable': insideString.variable,\n    // Originally based on http://ss64.com/bash/\n    'function': {\n      pattern: /(^|[\\s;|&])(?:alias|apropos|apt-get|aptitude|aspell|awk|basename|bash|bc|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chmod|chown|chroot|chkconfig|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|grep|groupadd|groupdel|groupmod|groups|gzip|hash|head|help|hg|history|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|jobs|join|kill|killall|less|link|ln|locate|logname|logout|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|make|man|mkdir|mkfifo|mkisofs|mknod|more|most|mount|mtools|mtr|mv|mmv|nano|netstat|nice|nl|nohup|notify-send|npm|nslookup|open|op|passwd|paste|pathchk|ping|pkill|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|rename|renice|remsync|rev|rm|rmdir|rsync|screen|scp|sdiff|sed|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|sync|tail|tar|tee|test|time|timeout|times|touch|top|traceroute|trap|tr|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|uptime|useradd|userdel|usermod|users|uuencode|uudecode|v|vdir|vi|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yes|zip)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&])(?:let|:|\\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&])(?:true|false)(?=$|[\\s;|&])/,\n      lookbehind: true\n    },\n    'operator': /&&?|\\|\\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];]/\n  };\n  var inside = insideString.variable[1].inside;\n  inside.string = Prism.languages.bash.string;\n  inside['function'] = Prism.languages.bash['function'];\n  inside.keyword = Prism.languages.bash.keyword;\n  inside['boolean'] = Prism.languages.bash['boolean'];\n  inside.operator = Prism.languages.bash.operator;\n  inside.punctuation = Prism.languages.bash.punctuation;\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /[a-z0-9_]+(?=\\()/i,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': /-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/]/,\n  'number': /(?:\\b0x[\\da-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['class-name'];\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'operator': /--?|\\+\\+?|!=?|<{1,2}=?|>{1,2}=?|->|:{1,2}|={1,2}|\\^|~|%|&{1,2}|\\|\\|?|\\?|\\*|\\/|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/\n});\nPrism.languages.insertBefore('cpp', 'keyword', {\n  'class-name': {\n    pattern: /(class\\s+)\\w+/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\nPrism.languages.css = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n  'atrule': {\n    pattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n  'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,\n  'string': {\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n  'important': /\\B!important\\b/i,\n  'function': /[-a-z0-9]+(?=\\()/i,\n  'punctuation': /[(){};:]/\n};\nPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('markup', 'tag', {\n    'style': {\n      pattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,\n      lookbehind: true,\n      inside: Prism.languages.css,\n      alias: 'language-css',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'style-attr': {\n      pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n      inside: {\n        'attr-name': {\n          pattern: /^\\s*style/i,\n          inside: Prism.languages.markup.tag.inside\n        },\n        'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n        'attr-value': {\n          pattern: /.+/i,\n          inside: Prism.languages.css\n        }\n      },\n      alias: 'language-css'\n    }\n  }, Prism.languages.markup.tag);\n}\n/* \"prismjs/components/prism-javascript\" */\n\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n  'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,\n    alias: 'function'\n  },\n  'constant': /\\b[A-Z][A-Z\\d_]*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\${[^}]+}/,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: null // See below\n\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\nPrism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('markup', 'tag', {\n    'script': {\n      pattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n      lookbehind: true,\n      inside: Prism.languages.javascript,\n      alias: 'language-javascript',\n      greedy: true\n    }\n  });\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') {} else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: /[^{}\\s][^{}]*(?=\\s*\\{)/,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+(?:\\(.*\\))?/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': /\\[[^\\]]+\\]/\n  }\n};\nPrism.languages.insertBefore('css', 'function', {\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'number': /[\\d%.]+/\n});\n/* \"prismjs/components/prism-diff\" */\n\nPrism.languages.diff = {\n  'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n  /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n  /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n  /^\\d+.*$/m],\n  // Match inserted and deleted lines. Support both +/- and >/< styles.\n  'deleted': /^[-<].*$/m,\n  'inserted': /^[+>].*$/m,\n  // Match \"different\" lines (prefixed with \"!\") in context diff.\n  'diff': {\n    'pattern': /^!(?!!).+$/m,\n    'alias': 'important'\n  }\n};\n/* \"prismjs/components/prism-docker\" */\n\nPrism.languages.docker = {\n  'keyword': {\n    pattern: /(^\\s*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)/mi,\n    lookbehind: true\n  },\n  'string': /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n  'comment': /#.*/,\n  'punctuation': /---|\\.\\.\\.|[:[\\]{}\\-,|>?]/\n};\nPrism.languages.dockerfile = Prism.languages.docker;\n/* \"prismjs/components/prism-elixir\" */\n\nPrism.languages.elixir = {\n  'comment': {\n    pattern: /#.*/m,\n    lookbehind: true\n  },\n  // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n  'regex': {\n    pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n    greedy: true\n  },\n  'string': [{\n    // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n    pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n    greedy: true,\n    inside: {}\n  }, {\n    pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n    greedy: true,\n    inside: {}\n  }, {\n    // Multi-line strings are allowed\n    pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {}\n  }],\n  'atom': {\n    // Look-behind prevents bad highlighting of the :: operator\n    pattern: /(^|[^:]):\\w+/,\n    lookbehind: true,\n    alias: 'symbol'\n  },\n  // Look-ahead prevents bad highlighting of the :: operator\n  'attr-name': /\\w+:(?!:)/,\n  'capture': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'argument': {\n    // Look-behind prevents bad highlighting of the && operator\n    pattern: /(^|[^&])&\\d+/,\n    lookbehind: true,\n    alias: 'variable'\n  },\n  'attribute': {\n    pattern: /@\\w+/,\n    alias: 'variable'\n  },\n  'number': /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n  'keyword': /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n  'boolean': /\\b(?:true|false|nil)\\b/,\n  'operator': [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n    // We don't want to match <<\n    pattern: /([^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /([^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'punctuation': /<<|>>|[.,%\\[\\]{}()]/\n};\nPrism.languages.elixir.string.forEach(function (o) {\n  o.inside = {\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.elixir\n      }\n    }\n  };\n});\n/* \"prismjs/components/prism-erlang\" */\n\nPrism.languages.erlang = {\n  'comment': /%.+/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'quoted-function': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n    alias: 'function'\n  },\n  'quoted-atom': {\n    pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n    alias: 'atom'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'keyword': /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n  'number': [/\\$\\\\?./, /\\d+#[a-z0-9]+/i, /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i],\n  'function': /\\b[a-z][\\w@]*(?=\\()/,\n  'variable': {\n    // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n    pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n    lookbehind: true\n  },\n  'operator': [/[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/, {\n    // We don't want to match <<\n    pattern: /(^|[^<])<(?!<)/,\n    lookbehind: true\n  }, {\n    // We don't want to match >>\n    pattern: /(^|[^>])>(?!>)/,\n    lookbehind: true\n  }],\n  'atom': /\\b[a-z][\\w@]*/,\n  'punctuation': /[()[\\]{}:;,.#|]|<<|>>/\n};\n/* \"prismjs/components/prism-git\" */\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-graphql\" */\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': /[a-z_]\\w*(?=\\s*:)/i,\n  'keyword': [{\n    pattern: /(fragment\\s+(?!on)[a-z_]\\w*\\s+|\\.{3}\\s*)on\\b/,\n    lookbehind: true\n  }, /\\b(?:query|fragment|mutation)\\b/],\n  'operator': /!|=|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/\n};\n/* \"prismjs/components/prism-markup-templating\" */\n\nPrism.languages['markup-templating'] = {};\nObject.defineProperties(Prism.languages['markup-templating'], {\n  buildPlaceholders: {\n    // Tokenize all inline templating expressions matching placeholderPattern\n    // If the replaceFilter function is provided, it will be called with every match.\n    // If it returns false, the match will not be replaced.\n    value: function value(env, language, placeholderPattern, replaceFilter) {\n      if (env.language !== language) {\n        return;\n      }\n\n      env.tokenStack = [];\n      env.code = env.code.replace(placeholderPattern, function (match) {\n        if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n          return match;\n        }\n\n        var i = env.tokenStack.length; // Check for existing strings\n\n        while (env.code.indexOf('___' + language.toUpperCase() + i + '___') !== -1) {\n          ++i;\n        } // Create a sparse array\n\n\n        env.tokenStack[i] = match;\n        return '___' + language.toUpperCase() + i + '___';\n      }); // Switch the grammar to markup\n\n      env.grammar = Prism.languages.markup;\n    }\n  },\n  tokenizePlaceholders: {\n    // Replace placeholders with proper tokens after tokenizing\n    value: function value(env, language) {\n      if (env.language !== language || !env.tokenStack) {\n        return;\n      } // Switch the grammar back\n\n\n      env.grammar = Prism.languages[language];\n      var j = 0;\n      var keys = Object.keys(env.tokenStack);\n\n      var walkTokens = function walkTokens(tokens) {\n        if (j >= keys.length) {\n          return;\n        }\n\n        for (var i = 0; i < tokens.length; i++) {\n          var token = tokens[i];\n\n          if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n            var k = keys[j];\n            var t = env.tokenStack[k];\n            var s = typeof token === 'string' ? token : token.content;\n            var index = s.indexOf('___' + language.toUpperCase() + k + '___');\n\n            if (index > -1) {\n              ++j;\n              var before = s.substring(0, index);\n              var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar, language), 'language-' + language, t);\n              var after = s.substring(index + ('___' + language.toUpperCase() + k + '___').length);\n              var replacement;\n\n              if (before || after) {\n                replacement = [before, middle, after].filter(function (v) {\n                  return !!v;\n                });\n                walkTokens(replacement);\n              } else {\n                replacement = middle;\n              }\n\n              if (typeof token === 'string') {\n                Array.prototype.splice.apply(tokens, [i, 1].concat(replacement));\n              } else {\n                token.content = replacement;\n              }\n\n              if (j >= keys.length) {\n                break;\n              }\n            }\n          } else if (token.content && typeof token.content !== 'string') {\n            walkTokens(token.content);\n          }\n        }\n      };\n\n      walkTokens(env.tokens);\n    }\n  }\n});\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-haskell\" */\n\n\nPrism.languages.haskell = {\n  'comment': {\n    pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\n    lookbehind: true\n  },\n  'char': /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n  'string': {\n    pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n  'import_statement': {\n    // The imported or hidden names are not included in this import\n    // statement. This is because we want to highlight those exactly like\n    // we do for the names in the program.\n    pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n    lookbehind: true,\n    inside: {\n      'keyword': /\\b(?:import|qualified|as|hiding)\\b/\n    }\n  },\n  // These are builtin variables only. Constructors are highlighted later as a constant.\n  'builtin': /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n  // decimal integers and floating point numbers | octal integers | hexadecimal integers\n  'number': /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n  // Most of this is needed because of the meaning of a single '.'.\n  // If it stands alone freely, it is the function composition.\n  // It may also be a separator between a module name and an identifier => no\n  // operator. If it comes together with other special characters it is an\n  // operator too.\n  'operator': /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n  // In Haskell, nearly everything is a variable, do not highlight these.\n  'hvariable': /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n  'constant': /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-java\" */\n\nPrism.languages.java = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while)\\b/,\n  'number': /\\b0b[01]+\\b|\\b0x[\\da-f]*\\.?[\\da-fp-]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?[df]?/i,\n  'operator': {\n    pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|!=?|<<?=?|>>?>?=?|==?|&[&=]?|\\|[|=]?|\\*=?|\\/=?|%=?|\\^=?|[?:~])/m,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('java', 'function', {\n  'annotation': {\n    alias: 'punctuation',\n    pattern: /(^|[^.])@\\w+/,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('java', 'class-name', {\n  'generics': {\n    pattern: /<\\s*\\w+(?:\\.\\w+)?(?:\\s*,\\s*\\w+(?:\\.\\w+)?)*>/i,\n    alias: 'function',\n    inside: {\n      keyword: Prism.languages.java.keyword,\n      punctuation: /[<>(),.:]/\n    }\n  }\n});\n/* \"prismjs/components/prism-json\" */\n\nPrism.languages.json = {\n  'property': /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/i,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n  'punctuation': /[{}[\\]);,]/,\n  'operator': /:/g,\n  'boolean': /\\b(?:true|false)\\b/i,\n  'null': /\\bnull\\b/i\n};\nPrism.languages.jsonp = Prism.languages.json;\n/* \"prismjs/components/prism-latex\" */\n\n(function (Prism) {\n  var funcPattern = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i,\n      insideEqu = {\n    'equation-command': {\n      pattern: funcPattern,\n      alias: 'regex'\n    }\n  };\n  Prism.languages.latex = {\n    'comment': /%.*/m,\n    // the verbatim environment prints whitespace to the document\n    'cdata': {\n      pattern: /(\\\\begin\\{((?:verbatim|lstlisting)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * equations can be between $ $ or \\( \\) or \\[ \\]\n     * (all are multiline)\n     */\n    'equation': [{\n      pattern: /\\$(?:\\\\[\\s\\S]|[^\\\\$])*\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n      inside: insideEqu,\n      alias: 'string'\n    }, {\n      pattern: /(\\\\begin\\{((?:equation|math|eqnarray|align|multline|gather)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n      lookbehind: true,\n      inside: insideEqu,\n      alias: 'string'\n    }],\n\n    /*\n     * arguments which are keywords or references are highlighted\n     * as keywords\n     */\n    'keyword': {\n      pattern: /(\\\\(?:begin|end|ref|cite|label|usepackage|documentclass)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n      lookbehind: true\n    },\n\n    /*\n     * section or chapter headlines are highlighted as bold so that\n     * they stand out more\n     */\n    'headline': {\n      pattern: /(\\\\(?:part|chapter|section|subsection|frametitle|subsubsection|paragraph|subparagraph|subsubparagraph|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\}(?:\\[[^\\]]+\\])?)/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'function': {\n      pattern: funcPattern,\n      alias: 'selector'\n    },\n    'punctuation': /[[\\]{}&]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'punctuation': /[{}();:,]/,\n  'operator': /[+\\-*\\/]/\n}); // Invert function and punctuation positions\n\nPrism.languages.insertBefore('less', 'punctuation', {\n  'function': Prism.languages.less.function\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-markdown\" */\n\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  'blockquote': {\n    // > ...\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  'code': [{\n    // Prefixed by 4 spaces or 1 tab\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    // `code`\n    // ``code``\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }],\n  'title': [{\n    // title 1\n    // =======\n    // title 2\n    // -------\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    // # title 1\n    // ###### title 6\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: true,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  'hr': {\n    // ***\n    // ---\n    // * * *\n    // -----------\n    pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'list': {\n    // * item\n    // + item\n    // - item\n    // 1. item\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: true,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    // [id]: http://example.com \"Optional title\"\n    // [id]: http://example.com 'Optional title'\n    // [id]: http://example.com (Optional title)\n    // [id]: <http://example.com> \"Optional title\"\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      'variable': {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: true\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      'punctuation': /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  'bold': {\n    // **strong**\n    // __strong__\n    // Allow only one line break\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  'italic': {\n    // *em*\n    // _em_\n    // Allow only one line break\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^[*_]|[*_]$/\n    }\n  },\n  'url': {\n    // [example](http://example.com \"Optional title\")\n    // [example] [id]\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      'variable': {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: true\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown['bold'].inside['url'] = Prism.languages.markdown['url'];\nPrism.languages.markdown['italic'].inside['url'] = Prism.languages.markdown['url'];\nPrism.languages.markdown['bold'].inside['italic'] = Prism.languages.markdown['italic'];\nPrism.languages.markdown['italic'].inside['bold'] = Prism.languages.markdown['bold'];\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n    'constant': /\\b[A-Z0-9_]{2,}\\b/,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'delimiter': {\n      pattern: /\\?>|<\\?(?:php|=)?/i,\n      alias: 'important'\n    },\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': null // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': null // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n  Prism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/(?:<\\?php|<\\?)/ig.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-php-extras\" */\n\n\nPrism.languages.insertBefore('php', 'variable', {\n  'this': /\\$this\\b/,\n  'global': /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n  'scope': {\n    pattern: /\\b[\\w\\\\]+::/,\n    inside: {\n      keyword: /static|self|parent/,\n      punctuation: /::|\\\\/\n    }\n  }\n});\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'triple-quoted-string': {\n    pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-ruby\" */\n\n/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n\n(function (Prism) {\n  Prism.languages.ruby = Prism.languages.extend('clike', {\n    'comment': [/#.*/, {\n      pattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,\n      greedy: true\n    }],\n    'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n  });\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^#\\{|\\}$/,\n        alias: 'tag'\n      },\n      rest: Prism.languages.ruby\n    }\n  };\n  Prism.languages.insertBefore('ruby', 'keyword', {\n    'regex': [{\n      pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    'symbol': {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('ruby', 'number', {\n    'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  });\n  Prism.languages.ruby.string = [{\n    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    // Here we need to specifically allow interpolation\n    pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }];\n})(Prism);\n/* \"prismjs/components/prism-rust\" */\n\n/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\n\n\nPrism.languages.rust = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'string': [{\n    pattern: /b?r(#*)\"(?:\\\\.|(?!\"\\1)[^\\\\\\r\\n])*\"\\1/,\n    greedy: true\n  }, {\n    pattern: /b?\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }],\n  'char': {\n    pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n    alias: 'string'\n  },\n  'lifetime-annotation': {\n    pattern: /'[^\\s>']+/,\n    alias: 'symbol'\n  },\n  'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n  'attribute': {\n    pattern: /#!?\\[.+?\\]/,\n    greedy: true,\n    alias: 'attr-name'\n  },\n  'function': [/\\w+(?=\\s*\\()/, // Macros can use parens or brackets\n  /\\w+!(?=\\s*\\(|\\[)/],\n  'macro-rules': {\n    pattern: /\\w+!/,\n    alias: 'function'\n  },\n  // Hex, oct, bin, dec numbers with visual separators and type suffix\n  'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n  // Closure params should not be confused with bitwise OR |\n  'closure-params': {\n    pattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n    inside: {\n      'punctuation': /[|:,]/,\n      'operator': /[&*]/\n    }\n  },\n  'punctuation': /[{}[\\];(),:]|\\.+|->/,\n  'operator': /[-+*\\/%!^]=?|=[=>]?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n};\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  delete Prism.languages.sass.selector;\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.scss.property = {\n  pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,\n  inside: {\n    'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  }\n};\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': /\\bnull\\b/,\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'variable': /@[\\w.$]+|@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-swift\" */\n// issues: nested multiline comments\n\n\nPrism.languages.swift = Prism.languages.extend('clike', {\n  'string': {\n    pattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        pattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,\n        inside: {\n          delimiter: {\n            pattern: /^\\\\\\(|\\)$/,\n            alias: 'variable' // See rest below\n\n          }\n        }\n      }\n    }\n  },\n  'keyword': /\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,\n  'number': /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n  'constant': /\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n  'atrule': /@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,\n  'builtin': /\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/\n});\nPrism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.languages.swift;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield|module|declare|constructor|namespace|abstract|require|type)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-vim\" */\n\nPrism.languages.vim = {\n  'string': /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n  'comment': /\".*/,\n  'function': /\\w+(?=\\()/,\n  'keyword': /\\b(?:ab|abbreviate|abc|abclear|abo|aboveleft|al|all|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|ar|args|argu|argument|as|ascii|bad|badd|ba|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bN|bNext|bo|botright|bp|bprevious|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|br|brewind|bro|browse|bufdo|b|buffer|buffers|bun|bunload|bw|bwipeout|ca|cabbrev|cabc|cabclear|caddb|caddbuffer|cad|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cgetb|cgetbuffer|cgete|cgetexpr|cg|cgetfile|c|change|changes|chd|chdir|che|checkpath|checkt|checktime|cla|clast|cl|clist|clo|close|cmapc|cmapclear|cnew|cnewer|cn|cnext|cN|cNext|cnf|cnfile|cNfcNfile|cnorea|cnoreabbrev|col|colder|colo|colorscheme|comc|comclear|comp|compiler|conf|confirm|con|continue|cope|copen|co|copy|cpf|cpfile|cp|cprevious|cq|cquit|cr|crewind|cuna|cunabbrev|cu|cunmap|cw|cwindow|debugg|debuggreedy|delc|delcommand|d|delete|delf|delfunction|delm|delmarks|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|di|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|earlier|echoe|echoerr|echom|echomsg|echon|e|edit|el|else|elsei|elseif|em|emenu|endfo|endfor|endf|endfunction|endfun|en|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fina|finally|fin|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|folddoc|folddoclosed|foldd|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|ha|hardcopy|h|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iuna|iunabbrev|iu|iunmap|j|join|ju|jumps|k|keepalt|keepj|keepjumps|kee|keepmarks|laddb|laddbuffer|lad|laddexpr|laddf|laddfile|lan|language|la|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|let|left|lefta|leftabove|lex|lexpr|lf|lfile|lfir|lfirst|lgetb|lgetbuffer|lgete|lgetexpr|lg|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|l|list|ll|lla|llast|lli|llist|lmak|lmake|lm|lmap|lmapc|lmapclear|lnew|lnewer|lne|lnext|lN|lNext|lnf|lnfile|lNf|lNfile|ln|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lpf|lpfile|lp|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|mak|make|ma|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkvie|mkview|mkv|mkvimrc|mod|mode|m|move|mzf|mzfile|mz|mzscheme|nbkey|new|n|next|N|Next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|omapc|omapclear|on|only|o|open|opt|options|ou|ounmap|pc|pclose|ped|pedit|pe|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|p|print|P|Print|profd|profdel|prof|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptN|ptNext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|pyf|pyfile|py|python|qa|qall|q|quit|quita|quitall|r|read|rec|recover|redi|redir|red|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|rub|ruby|rubyd|rubydo|rubyf|rubyfile|ru|runtime|rv|rviminfo|sal|sall|san|sandbox|sa|sargument|sav|saveas|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbN|sbNext|sbp|sbprevious|sbr|sbrewind|sb|sbuffer|scripte|scriptencoding|scrip|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sla|slast|sl|sleep|sm|smagic|sm|smap|smapc|smapclear|sme|smenu|sn|snext|sN|sNext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|sor|sort|so|source|spelld|spelldump|spe|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|sp|split|spr|sprevious|sre|srewind|sta|stag|startg|startgreplace|star|startinsert|startr|startreplace|stj|stjump|st|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tab|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabnew|tabn|tabnext|tabN|tabNext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|ta|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tm|tmenu|tn|tnext|tN|tNext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tu|tunmenu|una|unabbreviate|u|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|verb|verbose|ve|version|vert|vertical|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|vi|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|wa|wall|wh|while|winc|wincmd|windo|winp|winpos|win|winsize|wn|wnext|wN|wNext|wp|wprevious|wq|wqa|wqall|w|write|ws|wsverb|wv|wviminfo|X|xa|xall|x|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|XMLent|XMLns|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n  'builtin': /\\b(?:autocmd|acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|t_AB|t_AF|t_al|t_AL|t_bc|t_cd|t_ce|t_Ce|t_cl|t_cm|t_Co|t_cs|t_Cs|t_CS|t_CV|t_da|t_db|t_dl|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_fs|t_IE|t_IS|t_k1|t_K1|t_k2|t_k3|t_K3|t_k4|t_K4|t_k5|t_K5|t_k6|t_K6|t_k7|t_K7|t_k8|t_K8|t_k9|t_K9|t_KA|t_kb|t_kB|t_KB|t_KC|t_kd|t_kD|t_KD|t_ke|t_KE|t_KF|t_KG|t_kh|t_KH|t_kI|t_KI|t_KJ|t_KK|t_kl|t_KL|t_kN|t_kP|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_RI|t_RV|t_Sb|t_se|t_Sf|t_SI|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_WP|t_WS|t_xs|t_ZH|t_ZR)\\b/,\n  'number': /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n  'operator': /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n  'punctuation': /[{}[\\](),;:]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nexport default Prism;","import Prism from './vendor/prism';\nimport theme from '../themes/duotoneDark';\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: Prism,\n  theme: theme\n};\nexport default defaultProps;","var newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function normalizeEmptyLines(line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].empty = true;\n  }\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function normalizeTokens(tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = stackIndex > 0 ? types : [\"plain\"];\n        content = token;\n      } else {\n        types = types[0] === token.type ? types : types.concat(token.type);\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var _i = 1; _i < newlineCount; _i++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[_i]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nexport default normalizeTokens;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar themeToDict = function themeToDict(theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var types = themeEntry.types,\n        languages = themeEntry.languages,\n        style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nexport default themeToDict;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport React, { Component } from \"react\";\nimport normalizeTokens from \"../utils/normalizeTokens\";\nimport themeToDict from \"../utils/themeToDict\";\n\nvar Highlight =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Highlight, _Component);\n\n  function Highlight(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.themeDict = void 0;\n\n    _this.getLineProps = function (_ref) {\n      var key = _ref.key,\n          className = _ref.className,\n          style = _ref.style,\n          line = _ref.line,\n          rest = _objectWithoutPropertiesLoose(_ref, [\"key\", \"className\", \"style\", \"line\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      if (_this.themeDict !== undefined) {\n        output.style = _this.themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    _this.getStyleForToken = function (_ref2) {\n      var types = _ref2.types,\n          empty = _ref2.empty;\n      var typesSize = types.length;\n\n      if (_this.themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return _this.themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return _this.themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    };\n\n    _this.getTokenProps = function (_ref3) {\n      var key = _ref3.key,\n          className = _ref3.className,\n          style = _ref3.style,\n          token = _ref3.token,\n          rest = _objectWithoutPropertiesLoose(_ref3, [\"key\", \"className\", \"style\", \"token\"]);\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: _this.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) output.key = key;\n      if (className) output.className += \" \" + className;\n      return output;\n    };\n\n    if (props.theme) {\n      _this.themeDict = themeToDict(props.theme, props.language);\n    }\n\n    return _this;\n  }\n\n  var _proto = Highlight.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Prism = _this$props.Prism,\n        language = _this$props.language,\n        code = _this$props.code,\n        children = _this$props.children;\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? Prism.tokenize(code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: this.themeDict ? this.themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(Component);\n\nexport default Highlight;","import Prism from './vendor/prism';\nimport defaultProps from './defaultProps';\nimport Highlight from './components/Highlight';\nexport { Prism, defaultProps };\nexport default Highlight;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withMDXComponents = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar _React$createContext = _react2.default.createContext({}),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (_ref) {\n    var components = _ref.components,\n        props = _objectWithoutProperties(_ref, ['components']);\n\n    return _react2.default.createElement(\n      Consumer,\n      null,\n      function (contextComponents) {\n        return _react2.default.createElement(Component, _extends({ components: components || contextComponents }, props));\n      }\n    );\n  };\n};\n\nexports.withMDXComponents = withMDXComponents;\nvar MDXProvider = function MDXProvider(_ref2) {\n  var components = _ref2.components,\n      children = _ref2.children;\n  return _react2.default.createElement(\n    Provider,\n    { value: components },\n    children\n  );\n};\n\nexports.default = MDXProvider;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _mdxProvider = require('./mdx-provider');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar defaults = {\n  inlineCode: 'code',\n  wrapper: 'div'\n};\n\nvar MDXTag = function (_Component) {\n  _inherits(MDXTag, _Component);\n\n  function MDXTag() {\n    _classCallCheck(this, MDXTag);\n\n    return _possibleConstructorReturn(this, (MDXTag.__proto__ || Object.getPrototypeOf(MDXTag)).apply(this, arguments));\n  }\n\n  _createClass(MDXTag, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          name = _props.name,\n          parentName = _props.parentName,\n          _props$props = _props.props,\n          childProps = _props$props === undefined ? {} : _props$props,\n          children = _props.children,\n          _props$components = _props.components,\n          components = _props$components === undefined ? {} : _props$components,\n          Layout = _props.Layout,\n          layoutProps = _props.layoutProps;\n\n\n      var Component = components[parentName + '.' + name] || components[name] || defaults[name] || name;\n\n      if (Layout) {\n        return _react2.default.createElement(\n          Layout,\n          _extends({ components: components }, layoutProps),\n          _react2.default.createElement(\n            Component,\n            childProps,\n            children\n          )\n        );\n      }\n\n      return _react2.default.createElement(\n        Component,\n        childProps,\n        children\n      );\n    }\n  }]);\n\n  return MDXTag;\n}(_react.Component);\n\nexports.default = (0, _mdxProvider.withMDXComponents)(MDXTag);","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n * @author Lea Verou http://lea.verou.me\r\n */\n\n/**\r\n * prism-react-renderer:\r\n * This file has been modified to remove:\r\n * - globals and window dependency\r\n * - worker support\r\n * - highlightAll and other element dependent methods\r\n * - _.hooks helpers\r\n * - UMD/node-specific hacks\r\n * It has also been run through prettier\r\n */\nvar Prism = function () {\n  // Private helper vars\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function type(o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function objId(obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function clone(o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Insert a token before another token in a language literal\r\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n       * we cannot just provide an object, we need anobject and a key.\r\n       * @param inside The key (or language id) of the parent\r\n       * @param before The key to insert before. If not provided, the function appends instead.\r\n       * @param insert Object with the key/value pairs to insert\r\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      env.tokens = _.tokenize(env.code, env.grammar);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function matchGrammar(text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n            if (delNum != 1) _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            if (oneshot) break;\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function add() {}\n    },\n    tokenize: function tokenize(text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\nmodule.exports = Prism;\nPrism.default = Prism;","// @flow\r\n// Duotone Dark\r\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\r\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\r\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\r\n\r\n/*:: import type { PrismTheme } from '../src/types' */\r\n\r\nvar theme /*: PrismTheme */ = {\r\n  plain: {\r\n    backgroundColor: \"#2a2734\",\r\n    color: \"#9a86fd\"\r\n  },\r\n  styles: [\r\n    {\r\n      types: [\"comment\", \"prolog\", \"doctype\", \"cdata\", \"punctuation\"],\r\n      style: {\r\n        color: \"#6c6783\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"namespace\"],\r\n      style: {\r\n        opacity: 0.7\r\n      }\r\n    },\r\n    {\r\n      types: [\"tag\", \"operator\", \"number\"],\r\n      style: {\r\n        color: \"#e09142\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"property\", \"function\"],\r\n      style: {\r\n        color: \"#9a86fd\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"tag-id\", \"selector\", \"atrule-id\"],\r\n      style: {\r\n        color: \"#eeebff\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"attr-name\"],\r\n      style: {\r\n        color: \"#c4b9fe\"\r\n      }\r\n    },\r\n    {\r\n      types: [\r\n        \"boolean\",\r\n        \"string\",\r\n        \"entity\",\r\n        \"url\",\r\n        \"attr-value\",\r\n        \"keyword\",\r\n        \"control\",\r\n        \"directive\",\r\n        \"unit\",\r\n        \"statement\",\r\n        \"regex\",\r\n        \"at-rule\",\r\n        \"placeholder\",\r\n        \"variable\"\r\n      ],\r\n      style: {\r\n        color: \"#ffcc99\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"deleted\"],\r\n      style: {\r\n        textDecorationLine: \"line-through\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"inserted\"],\r\n      style: {\r\n        textDecorationLine: \"underline\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"italic\"],\r\n      style: {\r\n        fontStyle: \"italic\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"important\", \"bold\"],\r\n      style: {\r\n        fontWeight: \"bold\"\r\n      }\r\n    },\r\n    {\r\n      types: [\"important\"],\r\n      style: {\r\n        color: \"#c4b9fe\"\r\n      }\r\n    }\r\n  ]\r\n};\r\n\r\nmodule.exports = theme;\r\n"],"sourceRoot":""}